#!/usr/bin/perl -w
# $Id: hercjsu 1171 2019-06-28 19:02:57Z mueller $
# SPDX-License-Identifier: GPL-3.0-or-later
# Copyright 2017-2019 by Walter F.J. Mueller <W.F.J.Mueller@gsi.de>
#
#  Revision History:
# Date         Rev Version  Comment
# 2018-10-27  1061   1.3    forward job errors to exit code; add bailout()
# 2018-04-29  1014   1.2    add -asum and -osum
# 2018-04-13  1010   1.1    add -cfrac option
# 2018-01-28   991   1.0    Initial version
# 2017-10-21   957   0.1    First draft
#
# This script analyses JES2 job outputs as found in tk4- .
# It extracts information from the IEF403I to IEF404I header of the format
#             1         2         3         4         5         6
#   0123456789012345678901234567890123456789012345678901234567890123456789
#   08.02.25 JOB  353  IEF403I PERF#ASM - STARTED - TIME=08.02.25
#   08.02.27 JOB  353  IEFACTRT - Stepname  Procstep  Program   Retcode
#   08.02.27 JOB  353  PERF#ASM   CLG       ASM       IFOX00    RC= 0000
#   08.02.28 JOB  353  PERF#ASM   CLG       LKED      IEWL      RC= 0000
#   08.03.52 JOB  353  PERF#ASM   CLG       GO        PGM=*.DD  RC= 0000
#   23.37.11 JOB  522  HEWO#ASM   CLG       GO        PGM=*.DD  AB S0C4
#   08.03.52 JOB  353  IEF404I PERF#ASM - ENDED - TIME=08.03.52
#
# and from the job step info blocks of the format (blanks removed):
#
#   ****************************************************************************
#   *   3. Jobstep of job: PERF#ASM   Stepname: GO   Program name: PGM=*.DD .. *
#   *      elapsed time  00:01:24,43    CPU-Identifier:   TK4- Page-in:      0 *
#   *      CPU time  00:01:24,31  Virtual Storage used:   32K   Page-out:    0 *
#   *....                                                                      *
#   ****************************************************************************
#
# Examples:
#   hercjsu --fail  *_J*.prt
#   hercjsu --step=GO --nofile *_J*.prt
#   hercjsu --job="TOWH#.CC" *_J*.prt
#   hercjsu --job="HEWO#.*" --step=GO --nofile *_J*.prt
#

use 5.14.0;                                 # require Perl 5.14 or higher
use strict;                                 # require strict checking
use Getopt::Long;

my %opts = ();

GetOptions(\%opts, "help","nofile","fail","cfrac","asum","osum",
                   "job=s","step=s")
  or bailout("bad command options");

# handle help
if (defined $opts{help}) { do_help();  exit 0; }

#
# handle input files
#
my %stephash;
if ($opts{nofile}) {
print '  jnum  jobname  execname stepname progname  ret-code';
print $opts{cfrac} ? '   cpu-time CPU/ela   vmem' :
                     '  cpu-time      vmem   pgin';
print "\n";
}

my $nfail = 0;
foreach my $fname (@ARGV) {
  $nfail += do_file($fname);
}

# handle -asum and -osum
if ($opts{asum} || $opts{osum}) {
  print "\n" unless $opts{osum};
  print "jobname   stepname  ns       CPU   C-w50   elapsed   e-w50  CPU/ela" .
        "   vmem  pgin\n";
  foreach my $steptag (sort keys %stephash) {
    my ($jnam,$stepno,$psnam) = split '\|', $steptag;

    my ($ctim_m,$ctim_w) = getmw($steptag,'ctim');
    my ($etim_m,$etim_w) = getmw($steptag,'etim');
    my ($vmem_m,$vmem_w) = getmw($steptag,'vmem');
    my ($pgin_m,$pgin_w) = getmw($steptag,'pgin');

    my $ns = scalar @{$stephash{$steptag}{ctim}};
    printf "%-8s  %-8s %3d", $jnam,$psnam,$ns;
    print defined $ctim_m ? sprintf ' %8.2fs %6.2f%%', $ctim_m,$ctim_w  :
                                    '         ?       ?';
    print defined $etim_m ? sprintf ' %8.2fs %6.2f%%', $etim_m,$etim_w  :
                                    '         ?       ?';
    print defined $ctim_m && defined $etim_m && $etim_m > 0. ?
      sprintf '  %6.2f%%',100.*$ctim_m/$etim_m  : '        -';
    print defined $vmem_m ? sprintf ' %5dK',int($vmem_m+0.5)  : '      -';
    print defined $pgin_m ? sprintf ' %5d',int($pgin_m+0.5)  : '     -';
    print "\n";
  }
}

exit ($nfail ? 2 : 0);

#
# -- do_help: print help text ------------------------------------------------
#
sub do_help {
  print "usage: hercjsu [OPTIONS]... [FILE]...\n";
  print "  --job=jnam    show only jobs with given job name\n";
  print "  --step=snam   show only steps with given step name\n";
  print "  --fail        show jobs with failed steps (RC > 4 or ABEND)\n";
  print "  --cfrac       show CPU in seconds and CPU/elapsed ratio\n";
  print "  --nofile      don't print file name header\n";
  print "  --asum        add job/step average times\n";
  print "  --osum        show only job/step average times\n";
  return;
}

#
# -- do_file: handle input file ----------------------------------------------
#

sub do_file {
  my ($fname) = @_;
  open(IFILE,"<$fname") or bailout("'$fname' not readable: $!");

  my $jnum;
  my $jnam;
  while (<IFILE>) {
    if (m/^[0-9.]+\s+JOB\s+(\d+)\s+IEF403I\s+(.*?)\s+/) {
      $jnum = $1;
      $jnam = $2;
      last;
    }
  }
  unless (defined $jnum && defined $jnam) {
    print "hercjsu-E failed to detect IEF403I in $fname\n";
    close IFILE;
    return 1;
  }

  # quit if --job option seen and jobname doesn't match
  if (defined $opts{job} && $jnam !~ m/^$opts{job}$/) {
    close IFILE;
    return 0;
  }

  my @steps;

  while (<IFILE>) {
    if (m/^[0-9.]+\s+JOB\s+$jnum\s+$jnam\s+(.*?)\s+(.*?)\s+(.*?)\s+(.*)/) {
      push @steps,{snam => $1, psnam => $2, prog => $3, rcod => $4};
    }
    last if m/^[0-9.]+\s+JOB\s+(\d+)\s+IEF404I\s+(.*?)\s+/;
  }

  my $cstep = undef;
  while (<IFILE>) {
    last if m/^IEF375I/;
    if (m/^\*+$/) {
      $cstep = undef;
      next;
    }
    if (m/^\*\s+(\d+)\. Jobstep.*Stepname:\s+(.*?)\s+/) {
      $cstep = $1-1;
    }
    next unless defined $cstep;
    if (m/^\*\s+elapsed time\s+(.*?)\s+Page-in:\s+(.*?)\s+/) {
      $steps[$cstep]->{etim} = $1;
      $steps[$cstep]->{pgin} = $2;
    }
    if (m/^\*\s+CPU time\s+(.*?)\s+Virtual Storage used:\s+(.*?)\s+/) {
      $steps[$cstep]->{ctim} = $1;
      $steps[$cstep]->{vmem} = $2;
    }
  }

  my $fail = 0;
  foreach my $sdsc (@steps) {
    $fail = 1 if $sdsc->{rcod} ne "RC= 0000" && $sdsc->{rcod} ne "RC= 0004";
  }

  close IFILE;

  return $fail if (defined $opts{fail} && not $fail);

  print "$fname:\n" unless $opts{nofile} || $opts{osum};

  my $stepno = 1;
  foreach my $sdsc (@steps) {
    # quit if --step option seen and stepname doesn't match
    next if defined $opts{step} && $sdsc->{psnam} !~ m/^$opts{step}$/;

    $sdsc->{ctim} = "?" unless defined $sdsc->{ctim};
    $sdsc->{vmem} = "?" unless defined $sdsc->{vmem};
    $sdsc->{pgin} = "?" unless defined $sdsc->{pgin};

    my $ctim = cnvtim($sdsc->{ctim});
    my $etim = cnvtim($sdsc->{etim});

    unless ($opts{osum}) {
      printf "  J%04d %-8s %-8s %-8s %-8s  %-8s",
        $jnum,$jnam,
        $sdsc->{snam},$sdsc->{psnam},$sdsc->{prog},$sdsc->{rcod};

      unless ($opts{cfrac}) {
        printf "  %11s  %5s %6s\n", $sdsc->{ctim},$sdsc->{vmem},$sdsc->{pgin};
      } else {
        $sdsc->{etim} = "?" unless defined $sdsc->{etim};
        my $ctxt = defined $ctim ? sprintf '%8.2fs',$ctim : '?';
        my $crat = '?';
        if (defined $ctim && defined $etim) {
          $crat = $etim > 0 ? sprintf '%6.2f%%',100.*$ctim/$etim : '100.00%';
        }
        printf "  %9s %7s  %5s\n",$ctxt,$crat,$sdsc->{vmem};
      }
    }

    my $steptag = $jnam . '|' . sprintf('%03d',$stepno) . '|' . $sdsc->{psnam};
    push @{$stephash{$steptag}{ctim}}, $ctim if defined $ctim;
    push @{$stephash{$steptag}{etim}}, $etim if defined $etim;
    push @{$stephash{$steptag}{vmem}},$1 if $sdsc->{vmem} =~ m/^\s*(\d+)K$/;
    push @{$stephash{$steptag}{pgin}},$1 if $sdsc->{pgin} =~ m/^\s*(\d+)$/;
    $stepno += 1;
  }

  return $fail;
}

#
# -- bailout : end with fatal error ------------------------------------------
#
sub bailout {
  my ($msg) = @_;
  print STDERR "hercjsu-F: $msg\n";
  exit 1;
}

#
# -- cnvtime : helper to convert hh:mm:ss,ss into a float --------------------
#

sub cnvtim {
  my ($txttim) = @_;
  return undef unless defined $txttim;
  return undef unless $txttim =~ m/(\d\d):(\d\d):(\d\d),(\d\d)/;
  my $hh = $1;
  my $mm = $2;
  my $ss = $3;
  my $sf = $4;
  return 3600.*$hh + 60.*$mm + $ss + 0.01*$sf;
}

#
# -- df_lookup: lookup df ----------------------------------------------------
#
sub df_lookup {
  my ($df,$frac) = @_;
  my $nval = scalar(@{$df});
  return 0.        if $nval == 0;
  return $df->[0]  if $nval == 1;
  my $imax = $nval - 1;
  my $rind = $frac * $imax;
  my $ind  = int $rind;
  return $df->[$ind] if $ind == $imax;
  my $find = $rind - $ind;
  return (1.-$find)*$df->[$ind] + $find*$df->[$ind+1];
}

#
# -- getmw: get median and width ---------------------------------------------
#
sub getmw {
  my ($tag,$key) = @_;

  my @dfsort = sort {$a <=> $b} @{$stephash{$tag}{$key}};
  return (undef,undef) unless scalar @dfsort > 0;

  my $vl = df_lookup(\@dfsort, 0.25);
  my $vm = df_lookup(\@dfsort, 0.50);
  my $vu = df_lookup(\@dfsort, 0.75);
  my $vw = $vm > 0. ? 100.* ($vu - $vl) / $vm : 0.;
  return ($vm,$vw);
}
